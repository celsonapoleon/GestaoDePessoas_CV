# -*- coding: utf-8 -*-
"""GestaoDePessoas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12jAkk1CI21Gij3Gfl07JQ7sMMxzvBFwP

Sistema de **"Agente de Apoio à Carreira e Desenvolvimento Profissional"**: Um agente com tools e lógica de decisão, além de implementar um sistema multiagentes básico focado em automação que ajuda na elaboração de currículos e cartas de apresentação, oferece dicas para entrevistas, sugere cursos e treinamentos relevantes para sua área e te conecta com oportunidades de emprego.
"""

import json
from datetime import datetime

class BaseAgent:
    def __init__(self, name):
        self.name = name
        self.memory = {} # Simulação de memória para aprendizado (simples dicionário)

    def pensar_passo_a_passo(self, pensamento):
        print(f"[{self.name}] Pensando: {pensamento}")

    def gerar_conteudo(self, conteudo):
        self.pensar_passo_a_passo(f"Gerando conteúdo: {conteudo[:50]}...") # Exibe os primeiros 50 caracteres
        return conteudo

    def especular(self, especulacao):
        print(f"[{self.name}] Especulando: {especulacao}")
        return especulacao

    def nao_sei(self, motivo):
        print(f"[{self.name}] Não sei a resposta porque: {motivo}")
        return None

    def citar_fonte(self, fonte, info):
        print(f"[{self.name}] Fonte: {fonte} - Informação: {info[:50]}...") # Exibe os primeiros 50 caracteres
        return {"fonte": fonte, "informacao": info}

    def receber_mensagem(self, remetente, mensagem):
        print(f"[{self.name}] Recebeu mensagem de [{remetente.name}]: {mensagem}")
        self.memory.setdefault(remetente.name, []).append({"timestamp": datetime.now().isoformat(), "mensagem": mensagem})

    def enviar_mensagem(self, destinatario, mensagem):
        print(f"[{self.name}] Enviando mensagem para [{destinatario.name}]: {mensagem}")
        destinatario.receber_mensagem(self, mensagem)

class UserProfileAgent(BaseAgent):
    def __init__(self):
        super().__init__("Agente de Perfil do Usuário")
        self.user_data = {}

    def coletar_informacoes(self):
        print(f"[{self.name}] Iniciando coleta de informações do usuário...")
        # Simulação de coleta de informações (substituir por interações reais)
        self.user_data['nome'] = input("Digite seu nome: ")
        self.user_data['experiencia'] = input("Descreva sua experiência profissional: ")
        self.user_data['habilidades'] = input("Liste suas principais habilidades: ")
        self.user_data['objetivo'] = input("Qual seu objetivo de carreira? ")
        self.user_data['area_interesse'] = input("Qual sua área de interesse para desenvolvimento? ")
        print(f"[{self.name}] Informações do usuário coletadas.")
        return self.user_data

class DocumentGenerationAgent(BaseAgent):
    def __init__(self):
        super().__init__("Agente de Geração de Documentos")

    def gerar_curriculo(self, user_data):
        self.pensar_passo_a_passo("Gerando currículo com base nos dados do usuário.")
        if not user_data:
            return self.nao_sei("Não há dados do usuário para gerar o currículo.")

        curriculo = f"""
        --- Currículo ---
        Nome: {user_data.get('nome', 'N/A')}
        Experiência: {user_data.get('experiencia', 'N/A')}
        Habilidades: {user_data.get('habilidades', 'N/A')}
        Objetivo: {user_data.get('objetivo', 'N/A')}
        --- Fim do Currículo ---
        """
        return self.gerar_conteudo(curriculo)

    def gerar_carta_apresentacao(self, user_data, vaga=None):
        self.pensar_passo_a_passo(f"Gerando carta de apresentação para a vaga: {vaga if vaga else 'genérica'}.")
        if not user_data:
            return self.nao_sei("Não há dados do usuário para gerar a carta de apresentação.")

        carta = f"""
        --- Carta de Apresentação ---
        Prezado(a) Senhor(a),

        Com base em minha experiência em {user_data.get('experiencia', 'N/A')} e minhas habilidades em {user_data.get('habilidades', 'N/A')},
        acredito que possuo o perfil adequado para contribuir com sua organização. Meu objetivo de carreira é {user_data.get('objetivo', 'N/A')}.

        Agradeço a sua atenção e coloco-me à disposição para uma entrevista.

        Atenciosamente,
        {user_data.get('nome', 'N/A')}
        --- Fim da Carta de Apresentação ---
        """
        return self.gerar_conteudo(carta)

class DevelopmentSuggestionAgent(BaseAgent):
    def __init__(self):
        super().__init__("Agente de Sugestão de Desenvolvimento")
        self.cursos_data = {
            "programacao": [
                {"nome": "Python para Iniciantes", "link": "https://www.exemplo.com/python_iniciantes"},
                {"nome": "Desenvolvimento Web com Django", "link": "https://www.exemplo.com/django"}
            ],
            "marketing": [
                {"nome": "Marketing Digital Essencial", "link": "https://www.exemplo.com/marketing_digital"},
                {"nome": "SEO Avançado", "link": "https://www.exemplo.com/seo_avancado"}
            ],
            "gestao_projetos": [
                {"nome": "Fundamentos de Gerenciamento de Projetos", "link": "https://www.exemplo.com/gestao_projetos_fundamentos"},
                {"nome": "Metodologias Ágeis", "link": "https://www.exemplo.com/metodologias_ageis"}
            ]
        }

    def sugerir_cursos(self, area_interesse):
        self.pensar_passo_a_passo(f"Sugerindo cursos para a área de: {area_interesse}.")
        if area_interesse.lower() in self.cursos_data:
            sugestoes = [self.citar_fonte(curso['link'], curso['nome']) for curso in self.cursos_data[area_interesse.lower()]]
            return self.gerar_conteudo(f"Cursos sugeridos para {area_interesse}: {sugestoes}")
        else:
            return self.nao_sei(f"Não tenho cursos específicos para a área de '{area_interesse}' no momento.")

class InterviewPrepAgent(BaseAgent):
    def __init__(self):
        super().__init__("Agente de Preparação para Entrevistas")
        self.dicas = [
            "Pesquise sobre a empresa e a vaga.",
            "Prepare respostas para perguntas comuns (fale sobre você, seus pontos fortes e fracos, etc.).",
            "Vista-se de forma profissional.",
            "Chegue no horário.",
            "Faça perguntas relevantes ao final da entrevista."
        ]

    def oferecer_dicas(self):
        self.pensar_passo_a_passo("Oferecendo dicas para entrevistas.")
        return self.gerar_conteudo(f"Dicas para entrevistas: {', '.join(self.dicas)}")

    def simular_entrevista(self):
        self.pensar_passo_a_passo("Simulando uma pergunta de entrevista.")
        # Simulação muito básica
        perguntas = ["Fale um pouco sobre você.", "Qual sua maior fraqueza?", "Onde você se vê em 5 anos?"]
        import random
        pergunta = random.choice(perguntas)
        return self.gerar_conteudo(f"Pergunta de simulação: {pergunta}")

class OpportunityConnectorAgent(BaseAgent):
    def __init__(self):
        super().__init__("Agente de Conexão com Oportunidades")
        self.vagas = {
            "programador python": [
                {"titulo": "Desenvolvedor Python Júnior", "empresa": "Empresa A", "link": "https://www.exemplo.com/vaga_python_jr"},
                {"titulo": "Desenvolvedor Python Pleno", "empresa": "Empresa B", "link": "https://www.exemplo.com/vaga_python_pl"}
            ],
            "analista de marketing": [
                {"titulo": "Analista de Marketing Júnior", "empresa": "Agência X", "link": "https://www.exemplo.com/vaga_marketing_jr"}
            ]
        }

    def buscar_oportunidades(self, area_interesse):
        self.pensar_passo_a_passo(f"Buscando oportunidades para a área de: {area_interesse}.")
        area_formatada = area_interesse.lower().replace(" ", "_") # Adapta para a chave no dicionário (simplificado)
        if area_formatada in self.vagas:
            oportunidades = [self.citar_fonte(vaga['link'], f"{vaga['titulo']} - {vaga['empresa']}") for vaga in self.vagas[area_formatada]]
            return self.gerar_conteudo(f"Oportunidades encontradas para {area_interesse}: {oportunidades}")
        else:
            return self.especular(f"Não encontrei vagas específicas para '{area_interesse}' no meu banco de dados no momento. Talvez você encontre em plataformas como [Link para Indeed], [Link para LinkedIn Vagas].") # Exemplo de especulação com sugestão de fontes

# Função para simular a interação entre os agentes
def sistema_de_apoio_carreira():
    perfil_agente = UserProfileAgent()
    documento_agente = DocumentGenerationAgent()
    desenvolvimento_agente = DevelopmentSuggestionAgent()
    entrevista_agente = InterviewPrepAgent()
    oportunidade_agente = OpportunityConnectorAgent()

    print("Bem-vindo ao Sistema de Apoio à Carreira e Desenvolvimento Profissional!")

    # Fase 1: Coleta de informações do usuário
    user_data = perfil_agente.coletar_informacoes()

    # Fase 2: Geração de currículo e carta
    print("\n--- Geração de Currículo e Carta ---")
    curriculo = documento_agente.gerar_curriculo(user_data)
    if curriculo:
        print("\nSeu Currículo:\n", curriculo)
    carta = documento_agente.gerar_carta_apresentacao(user_data, vaga="Desenvolvedor Python Júnior") # Exemplo de vaga
    if carta:
        print("\nSua Carta de Apresentação:\n", carta)

    # Fase 3: Sugestão de desenvolvimento
    print("\n--- Sugestões de Desenvolvimento ---")
    if 'area_interesse' in user_data:
        sugestoes_cursos = desenvolvimento_agente.sugerir_cursos(user_data['area_interesse'])
        if sugestoes_cursos:
            print(sugestoes_cursos)

    # Fase 4: Preparação para entrevistas
    print("\n--- Preparação para Entrevistas ---")
    dicas_entrevista = entrevista_agente.oferecer_dicas()
    if dicas_entrevista:
        print(dicas_entrevista)
    simulacao_pergunta = entrevista_agente.simular_entrevista()
    if simulacao_pergunta:
        print(simulacao_pergunta)

    # Fase 5: Conexão com oportunidades
    print("\n--- Conexão com Oportunidades ---")
    if 'area_interesse' in user_data:
        oportunidades = oportunidade_agente.buscar_oportunidades(user_data['area_interesse'])
        if oportunidades:
            print(oportunidades)

# Executar o sistema
if __name__ == "__main__":
    sistema_de_apoio_carreira()